{"name":"Geb-mobile","tagline":"A geb navigator factory for mobile support for Appium, Selendroid and IosDriver","body":"\r\n# Geb Mobile Extension for Appium, Selendroid and IosDriver\r\n---\r\n\r\n## Motivation\r\n+ Geb is cool [See here](http://www.gebish.org/)\r\n+ Spock is awesome [See here](http://docs.spockframework.org/en/latest/)\r\n+ Geb/Spock both together is super cool and awesome [See here](http://www.gebish.org/manual/current/testing.html#spock_junit__testng)\r\n+ Mobile Test Automation sucks, cause of so many frameworks\r\n+ Write BDT Style [See here](http://de.slideshare.net/vodqanite/behavior-driven-testing-bdt)\r\n\r\n\r\n## Used Stuff\r\n+ Android Debug Bridge \r\n+ Xcode stuff \r\n+ Geb v0.9.3\r\n+ Spock\r\n+ Gradle\r\n+ Appium >= v1.2.1\r\n+ Appium Java Client v1.6.2\r\n+ Selendroid \r\n+ IosDriver\r\n\r\n\r\n## Preconditions\r\n1. install adb for android\r\n2. install xcode for ios\r\n3. for appium you need the nodejs appium installed\r\n4. if you start your servers yourself, the append a '-DskipServer=true' to the commandline \r\n5. Appium on Mac is tricky, see notes at the end\r\n\r\n## Get Started\r\n1. Plugin a mobile device or start a virtual device \r\n2. check with 'adb devices', that your device or emulator is registered\r\n3. start with './gradlew -i runSeleniumTests' if you have an android devices with API-Level < 17 \r\n4. for API-Level > 17 you can also try './gradlew -i runAppiumTests' \r\n5. The selendroid or appium server \r\n\r\n## Actual supported stuff\r\n\r\n## TODO \r\n+ Different Dependency Managment for Appium and Selendroid, cause latest Appium Client needs a selenium version that breaks the selendroid server\r\n+ Test the iosdriver on mac with the UIMountain or UICatalog app\r\n+ Improve performance, when checking the attributes or property of a WebElement \r\n \r\n\r\n## Hints \r\n + Don't wait for the Android Emulator , use a real device \r\n + for easy dev: put break-point on desired method,\r\n + open evalute window: (CTRL-U) , run\r\n + AppiumPageSourceConverter.writeActivityContent(driver)\r\n\r\n\r\n## Info zu AppiumDriver\r\n`getAppiumDriver().findElementsByXPath(\".//*\").collect{ return \"$it.id : $it.tagName: $it.text : ${it.getAttribute(\"name\")} : ${it.getAttribute(\"className\")}\"}`\r\n\r\n# IOS - Appium - Real Device TODO's:\r\n- on version 1.2.2 the deviceconsole is not compiled ...\r\n- cd /usr/local/lib/node_modules/appium/build/deviceconsole/\r\n- make\r\n- clone SafariLauncher from github, build it with your dev licence and put it into .../node_module/appium/build/SafariLauncher/ \r\n- brew install ios-webkit-debug-proxy\r\n- run: ios_webkit_debug_proxy -c <your-udid-from-your-device>:27753\r\n\r\n## IOSDriver\r\n`driver.execute(\"getPageSource\").tree`\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}