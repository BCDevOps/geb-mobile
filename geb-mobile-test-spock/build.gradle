dependencies {
    compile project(':geb-mobile')
}

tasks.withType(Test) { task ->
    onlyIf { !Boolean.getBoolean('skip.tests') }
    ignoreFailures = true
    systemProperties.put = System.properties
    outputs.upToDateWhen { false }
//setup the spock report:
    systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
    systemProperty 'com.athaydes.spockframework.report.internal.HtmlReportCreator.inlineCss', false
    systemProperty 'com.athaydes.spockframework.report.projectName',"Test build 1"
}

task androidOnLocalDevice(type: Test, dependsOn: [compileGroovy]) {

    /**
     * Need the following to be ready:
     *  Appium (Check for installation with Appium-doctor)
     *  ADB, with device connected
     *  app apk
     *
     **/

    systemProperties.put "framework", "appium"
    systemProperties.put "appium_app", "xxx"
    systemProperties.put "appium_platformName", "Android"
    systemProperties.put "appium_deviceName", "xxx"

    include '**/GebMobileAutomationTestWithPagesSpec.*'
}


task iOSOnLocalDevice(type: Test, dependsOn: [compileGroovy]) {

    /**
     * Install:
     *  Appium
     *  Xcode
     *  brew install ideviceinstaller
     *  app needed to be installed on iphone already
     *
     *
     *  fill in device info:
     **/

    File app = new File("demo_apps/WordPressSample.ipa")
    systemProperties.put "framework", "appium"
    systemProperties.put "appium_app", app.getAbsolutePath()
    systemProperties.put "appium_platformName", "iOS"
    systemProperties.put "appium_platformVersion", "xx"
    systemProperties.put "appium_deviceName", "xx"
    systemProperties.put "appium_automationName", "XCUITest"
    systemProperties.put "appium_udid", "xx"
    systemProperties.put "appium_xcodeOrgId", "xx"
    systemProperties.put "appium_xcodeSigningId", "xx"

    // To enable the web context:
//    systemProperties.put "appium_setWebContentsDebuggingEnabled", "true"

    include '**/CalculatorAppSpec.*'
}




task androidOnBrowserStack(type: Test, dependsOn: [compileGroovy]) {
    /**
     * UiAutomator2 capa minimum (with jdk1.8.0)
     *
     * automationName - UiAutomator2
     * platformName - Android
     * platformVersion
     * deviceName
     * app
     * browserName - Chrome/Chromium (for webview)
     *
     **/

    systemProperties.put "framework", "appium"
    systemProperties.put "appium_app", "xxx"
    systemProperties.put "appium.url", "xxx"
    systemProperties.put "appium_platformName", "Android"
    systemProperties.put "appium_deviceName", "xxx"
    systemProperties.put "appium_platformVersion", "xxx"

    include '**/GebMobileAutomationTestWithPagesSpec.*'
}


task iOSOnSauceLabs(type: Test, dependsOn: [compileGroovy]) {
    /**
     * UIAutomation capa minimum (for iOS 9.3 -)
     *
     * platformName - iOS
     * platformVersion
     * deviceName
     * app
     * browserName - Safari (for webview)
     *
     *
     * XCUITest capa minimum (for iOS 9.3 or higher)
     *
     * automationName - XCUITest
     * platformName - iOS
     * platformVersion
     * deviceName
     * app
     **/

    systemProperties.put "framework", "appium"
    systemProperties.put "appium_app", "xxx"
    systemProperties.put "appium.url", "xxx"
    systemProperties.put "appium_platformName", "iOS"
    systemProperties.put "appium_deviceName", "xxx"
    systemProperties.put "appium_platformVersion", "xxx"

    include '**/CalculatorAppSpec.*'
}


task uploadAppToDeviceFarm(type: Exec) {
/**
 *  BrowserStack:
 **/
//    Upload Android app:
//    commandLine = ['curl', '-u', "<username>:<password>", '-X', 'POST', "https://api.browserstack.com/app-automate/upload", '-F', "file=@/path/name.apk"]

//Upload iOS app:
    commandLine = ['curl', '-u', "<username>:<password>", '-X', 'POST', "https://api.browserstack.com/app-automate/upload", '-F', "file=@/path/name.ipa"]

/**
 *  SauceLabs:
 **/
//    Upload Android app:
//    commandLine = ['curl', '-u', "<username>:<password>", '-X', 'POST', '-H', "Content-Type: application/octet-stream" https://saucelabs.com/rest/v1/storage/<username>/testapp.apk?overwrite=true --data-binary", "@/path/name.apk"]

//    Upload iOS app:
//    commandLine = ['curl', '-u', "<username>:<password>", '-X', 'POST', '-H', "Content-Type: application/octet-stream" https://saucelabs.com/rest/v1/storage/<username>/testapp.ipa?overwrite=true --data-binary", "@/path/name.ipa"]

}
