apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'dr.legacy'
version = '0.1-SNAPSHOT'

ext.gebVersion = '0.9.1'
ext.seleniumVersion = '2.41.0'
ext.spockVersion = '0.7-groovy-2.0'
ext.groovyVersion = '2.3.4'
ext.selendroidVersion = '0.10.0'

repositories {
    mavenCentral()
}

configurations {
    selendroid
    iosdriver
}

dependencies {

    compile 'org.codehaus.groovy:groovy-all:$groovyVersion'
    compile "org.slf4j:slf4j-api:1.7.6"
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"

    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile("org.gebish:geb-spock:$gebVersion") {
        exclude module: "groovy"
        exclude module: "groovy-all"
    }
    compile("org.spockframework:spock-core:$spockVersion") {
        exclude module: "junit"
        exclude module: "groovy"
        exclude module: "groovy-all"
    }

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile("org.gebish:geb-spock:$gebVersion") {
        exclude module: "groovy"
        exclude module: "groovy-all"
    }
    compile("org.spockframework:spock-core:$spockVersion") {
        exclude module: "junit"
        exclude module: "groovy"
        exclude module: "groovy-all"
    }


    compile "io.selendroid:selendroid-standalone:$selendroidVersion"
    compile "io.selendroid:selendroid-client:$selendroidVersion"
    compile "org.uiautomation:ios-client:0.6+"
    compile('io.appium:java-client:1.6.1') {
        //exclude module: "selenium-java"
    }

    selendroid "io.selendroid:selendroid-standalone:${selendroidVersion}"

    iosdriver "org.uiautomation:ios-server:0.6+"

}

def startServer = { server, command ->
    println "Starting $server with $command"
    ProcessBuilder builder = new ProcessBuilder(command.split(' '))
    builder.redirectErrorStream(true)
    builder.directory(buildDir)
    Process process = builder.start()
    project.ext[server] = process
    println "$server started : $process"
    Thread.start("logging-$server") {
        FileOutputStream fout = new FileOutputStream(new File(buildDir, "${server}.log"))
        int bb
        while ((bb = process.getInputStream().read()) > 0) {
            fout.write(bb)
        }
    }
}

def stopServer = { server ->
    println "Stopping $server"
    if (project.ext.has(server)) {
        Process process = ext.get(server)
        println "send CTRL-C to server"
        try {
            process.getOutputStream().write(3)
            process.getOutputStream().flush()
        }catch(e){ }
        process.destroy()
    } else {
        println "No Server $server found in process list"
    }
}

task startSelendroid(group:'Server') << {
    startServer( "SELENDROID" , "java -cp ${configurations.selendroid.files.toList().join(":")} io.selendroid.SelendroidLauncher -port 4444 -aut ${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk")
}
task stopSelendroid(group:'Server') << {
    stopServer( "SELENDROID" )
}
task startAppium(group:'Server') << {
    startServer("APPIUM", "appium --command-timeout 90000")
}
task stopAppium(group:'Server') << {
    stopServer("APPIUM")
}
task startIosdriver(group:'Server') << {
    startServer( "IOSDRIVER", "java -cp ${configurations.iosdriver.files.toList().join(":")} org.uiautomation.ios.IOSServer" )
}
task stopIosdriver(group:'Server') << {
    stopServer("IOSDRIVER")
}

task stopServers << {
    ["SELENDROID","APPIUM","IOSDRIVER"].each{
        if( project.ext.has(it) ) stopServer(it)
    }
}

task runSelendroidTests(group:'Selendroid',type: Test, dependsOn: [startSelendroid]) {
    systemProperty "framework", "selendroid"
    systemProperty "appUT_absolutePath", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appUT.version", "0.10.0"
    systemProperty "appUT_cap_Emulator", "false"
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

task runAppiumTests(group:'Appium',type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"

    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    //To run the test on a specific device
    //System.setProperty("appium_udid","192.168.56.10:5555")
    //System.setProperty("appium_automationName","selendroid")

    //Use Appium
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

task runAppiumTestsWithSelendroidDriver(group:'Appium', type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"

    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appium_automationName", "selendroid"
    //To run the test on a specific device
    //System.setProperty("appium_udid","192.168.56.10:5555")
    //System.setProperty("appium_automationName","selendroid")

    //Use Appium
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

tasks.withType(Test){ task->
    stopServers.mustRunAfter(task)
    ignoreFailures = true
}





