apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'jumio.oss'
version = '0.1-SNAPSHOT'

ext.gebVersion = '0.9.3'
ext.seleniumVersion = '2.42.2'
ext.spockVersion = '0.7-groovy-2.0'
ext.groovyVersion = '2.3.4'
ext.selendroidVersion = '0.11.0'
ext.appiumClientVersion = '1.6.2'
ext.iosClientVersion =  '0.6+'

repositories {
    mavenCentral()
}

configurations {
    selendroid
    iosdriver
}

dependencies {

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "org.slf4j:slf4j-api:1.7.6"
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"

    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile("org.gebish:geb-spock:$gebVersion") {
        exclude module: "groovy"
        exclude module: "groovy-all"
    }
    compile("org.spockframework:spock-core:$spockVersion") {
        exclude module: "junit"
        exclude module: "groovy"
        exclude module: "groovy-all"
    }

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile("org.gebish:geb-spock:$gebVersion") {
        exclude module: "groovy"
        exclude module: "groovy-all"
    }
    compile("org.spockframework:spock-core:$spockVersion") {
        exclude module: "junit"
        exclude module: "groovy"
        exclude module: "groovy-all"
    }


    compile "io.selendroid:selendroid-standalone:$selendroidVersion"
    compile "io.selendroid:selendroid-client:$selendroidVersion"
    compile "org.uiautomation:ios-client:$iosClientVersion"
    compile ("io.appium:java-client:$appiumClientVersion")

    selendroid "io.selendroid:selendroid-standalone:${selendroidVersion}"

    iosdriver "org.uiautomation:ios-server:0.6+"
    //compile "org.uiautomation:ios-server:0.6+"

//    appium ("io.appium:java-client:$appiumClientVersion") {
//        exclude module: "selenium-java"
//    }
}



def startServer = { server, command ->
    if( System.properties.'skipServer')  { println "Skipping Server $server "; return }
    println "Starting $server with $command"
    ProcessBuilder builder = new ProcessBuilder(command.split(' '))
    builder.redirectErrorStream(true)
    builder.directory(buildDir)
    Process process = builder.start()
    project.ext[server] = process
    println "$server started : $process"
    def loggingThread = Thread.start("logging-$server") {
        FileOutputStream fout = new FileOutputStream(new File(buildDir, "${server}.log"))
        int bb
        while ((bb = process.getInputStream().read()) > 0) {
            fout.write(bb)
        }
    }
    if(System.getProperty("waitForServer")){
        println "Joining Server Logging Thread"
        loggingThread.join()
    }
}

def stopServer = { server ->
    println "Stopping $server"
    if (project.ext.has(server)) {
        Process process = ext.get(server)
        println "send CTRL-C to server"
        try {
            process.getOutputStream().write(3)
            process.getOutputStream().flush()
        }catch(e){ }
        process.destroy()
    } else {
        println "No Server $server found in process list"
    }
}

task startSelendroid(group:'Server') << {
    startServer( "SERVER_SELENDROID" , "java -cp ${configurations.selendroid.files.toList().join(":")} io.selendroid.SelendroidLauncher -port 4444 -aut ${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk")
}

task startSelendroidForWeb(group:'Server') << {
    startServer( "SERVER_SELENDROID_WEB" , "java -cp ${configurations.selendroid.files.toList().join(":")} io.selendroid.SelendroidLauncher -port 4444")
}

task startAppium(group:'Server') << {
    startServer("SERVER_APPIUM", "appium --command-timeout 90000")
}

task startIosdriver(group:'Server') << {
    startServer( "SERVER_IOSDRIVER", "java -Djava.util.logging.config.file=${projectDir}/config/iosdriver_logging.properties -cp ${configurations.iosdriver.files.toList().join(":")} org.uiautomation.ios.server.IOSServer -beta -simulators" )
}

task stopServers(group:'Server') << {
    project.ext.properties.each{k,v ->
        if( k=~/^SERVER_/ && project.ext.has(k) ) stopServer(k)
    }
}

task runSelendroidTests(group:'Selendroid',type: Test, dependsOn: [startSelendroid]) {

    systemProperty "framework", "selendroid"
    systemProperty "appUT_absolutePath", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appUT.version", "0.10.0"
    systemProperty "appUT_cap_Emulator", "false"
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

stopServers.mustRunAfter runSelendroidTests

task runAppiumTests(group:'Appium',type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"

    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appium_deviceName" , "Android"
    //To run the test on a specific device
    //System.setProperty("appium_udid","192.168.56.10:5555")
    //System.setProperty("appium_automationName","selendroid")

    //Use Appium
    include '**/UIAutomatorNavigatorTestWithPagesSpec.*'
}

stopServers.mustRunAfter runAppiumTests

task runAppiumTestsWithSelendroidDriver(group:'Appium', type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"

    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"
    systemProperty "appium_automationName", "selendroid"
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

stopServers.mustRunAfter runAppiumTestsWithSelendroidDriver

task runAppiumTestsWithOldDevice(group:'Appium', type: Test, dependsOn: [startAppium]) {
    systemProperty "framework", "appium"
    systemProperty "appUT.package", "io.selendroid.testapp"
    systemProperty "appium_app", "${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk"

    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

stopServers.mustRunAfter runAppiumTestsWithOldDevice

task runIosdriverTests(group: 'IosDriver', type: Test, dependsOn: [startIosdriver] ) {
    systemProperty "appUT.package", "UICatalog"
    systemProperty "iosdriver_app" , ""
    include '**/UICatalogAppSpec.*'
}

task runIosdriverInitTests(group:'IosDriver', type:Test, dependsOn: [startIosdriver]){
    include '**/SimpleIosMobileTest.*'
}

task runIosdriverInitTestsReal(group:'IosDriver', type:Test, dependsOn: [startIosdriver]){
    include '**/SimpleIosMobileTest.*'
}


tasks.withType(Test){ task->
    ignoreFailures = true
    systemProperty = System.properties
    outputs.upToDateWhen{ false }
    doLast{
        stopServers.execute()
    }
}



ext.saucelabsUser = System.getProperty("saucelabsUser", System.getenv("SAUCE_USERNAME"))
ext.saucelabsKey  = System.getProperty("saucelabsKey", System.getenv("SAUCE_ACCESS_KEY"))

ext.saucelabsUrl  = "http://${saucelabsUser}:${saucelabsKey}@ondemand.saucelabs.com:80/wd/hub"


task checkoutDemoOnSauceLabsAndroid(type: Test) {
    systemProperty "framework","appium"
    systemProperty "appium_app","sauce-storage:selendroid-test-app-0.9.0.apk"
    systemProperty "selenium.url", saucelabsUrl
    systemProperty "appium_platformName","Android"
    systemProperty "appium_deviceName","LG Nexus 4 Emulator"
    systemProperty "appium_platformVersion","4.4"
    systemProperty "appium_appium-version","1.0"
    include '**/GebMobileAutomationTestWithPagesSpec.*'
}

task uploadApk2Saucelabs{
    "curl -u $saucelabsUser:$saucelabsKey -X POST 'http://saucelabs.com/rest/v1/storage/$saucelabsUser/selendroid-test-app-0.9.0.apk?overwrite=true' -H 'Content-Type: application/octet-stream' --data-binary @${projectDir}/src/test/resources/testapk/selendroid-test-app-0.9.0.apk".execute()
}




