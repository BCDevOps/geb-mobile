buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'groovy'

version = '1.0-SNAPSHOT'

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

ext {
    groovyVersion = '2.4.12'
    gebVersion = '2.0'
    seleniumVersion = '3.6.0'
    spockVersion = '1.1-groovy-2.4'
    // appiumClientVersion = '4.1.2'
    appiumClientVersion = '5.0.4'
    selendroidVersion = '0.17.0'
    iosClientVersion = '0.6.5'
    slf4jVersion = '1.7.13'
    logbackVersion = '1.2.3'
    junitVersion = '4.11'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'groovy'

    repositories {
        mavenLocal()
        mavenCentral()
    }

}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'idea'


    dependencies {
        // compile "org.gebish:geb-spock:$gebVersion"
        // compile("org.spockframework:spock-core:1.1-groovy-2.4") {
        //     exclude group: "org.codehaus.groovy"
        // }
        // compile "org.codehaus.groovy:groovy-all:$groovyVersion"

        // // If using JUnit, need to depend on geb-junit (3 or 4)
        // compile "org.gebish:geb-junit4:$gebVersion"

        // //Support
        // compile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"


        // // Spock reports
        // compile( 'com.athaydes:spock-reports:1.3.2' ) {
        //     transitive = false // this avoids affecting your version of Groovy/Spock
        // }
        // compile 'org.slf4j:slf4j-api:1.7.13'
        // compile 'org.slf4j:slf4j-simple:1.7.13'



        // compile group: 'junit', name: 'junit', version: '4.12'
        // compile 'io.appium:java-client:4.1.2'




       compile("org.gebish:geb-spock:$gebVersion") {
            exclude module: "groovy"
            exclude module: "groovy-all"
       }

       compile("org.spockframework:spock-core:$spockVersion") {
           exclude module: "junit"
           exclude module: "groovy"
           exclude module: "groovy-all"
       }

       compile "org.gebish:geb-junit4:$gebVersion"

       compile "org.codehaus.groovy:groovy-all:$groovyVersion"
       compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"


// should not need these two: selendroid and iOSClient:
       compile "io.selendroid:selendroid-standalone:$selendroidVersion"
       compile "io.selendroid:selendroid-client:$selendroidVersion"
       compile "org.uiautomation:ios-client:$iosClientVersion"
// ------------------------------------------------------------------

       compile "io.appium:java-client:$appiumClientVersion"

       compile "org.slf4j:slf4j-api:$slf4jVersion"
       // testCompile 'org.slf4j:slf4j-simple:$slf4jVersion'
       compile "ch.qos.logback:logback-classic:$logbackVersion"

       compile "junit:junit:$junitVersion"
       testCompile "junit:junit:$junitVersion"
    }
}

def startServer = { server, command ->
    if (System.properties.'skipServer') {
        println "Skipping Server $server "; return
    }
    println "Starting $server with $command"
    ProcessBuilder builder = new ProcessBuilder(command.split(' '))
    builder.redirectErrorStream(true)
    builder.directory(buildDir)
    Process process = builder.start()
    project.ext[server] = process
    println "$server started : $process"
    def loggingThread = Thread.start("logging-$server") {
        FileOutputStream fout = new FileOutputStream(new File(buildDir, "${server}.log"))
        int bb
        while ((bb = process.getInputStream().read()) > 0) {
            fout.write(bb)
        }
    }
    if (System.getProperty("waitForServer")) {
        println "Joining Server Logging Thread"
        loggingThread.join()
    }
}

def stopServer = { server ->
    println "Stopping $server"
    if (project.ext.has(server)) {
        Process process = ext.get(server)
        println "send CTRL-C to server"
        try {
            process.getOutputStream().write(3)
            process.getOutputStream().flush()
        } catch (e) {
        }
        process.destroy()
    } else {
        println "No Server $server found in process list"
    }
}

task startAppium(group: 'Server') {
    doLast {
        startServer("SERVER_APPIUM", "appium --command-timeout 90000")
    }
}

task stopServers(group: 'Server') {
    doLast {
        project.ext.properties.each { k, v ->
            if (k =~ /^SERVER_/ && project.ext.has(k)) stopServer(k)
        }
    }
}

task checkenv {
    doLast {
        if (System.properties.'os.name'.toLowerCase().startsWith("mac")) {
            println "MAC ... "
            println "check appium installation: " + 'appium -v'.execute().text

        }
    }
}



